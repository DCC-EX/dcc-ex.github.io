.. include:: /include/include.rst
.. include:: /include/include-l2.rst
*************
Documentation
*************

.. sidebar:: On this page

   .. contents:: 
      :depth: 2
      :local:

This page aims to provide the information required to help people contribute to our documentation.

If what is outlined in this page is too involved, and you simply wish to provide some content that we can add, clarify, or update, then simply get in touch with us via the :doc:`/support/index` page and we can help you out.

GitHub Pages, sphinx, and reStructuredText
==========================================

Our website is hosted courtesy of `GitHub Pages <https://pages.github.com/>`_, is written in `reStructuredText <https://docutils.sourceforge.io/rst.html>`_, with the HTML being generated by `Sphinx <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_.

reStructuredText is a markdown type language for typesetting documents from websites to PDF or LaTeX documents. Our Website is built upon this technology, so you should make yourself familiar with this by looking through the links provided.

There's a handy `reStructuredText QuickReference Guide <https://docutils.sourceforge.io/docs/user/rst/quickref.html>`_ here.

If you haven't done so already, make sure you are familiar with how we use :doc:`/about/contributing/github` and are familiar with our :doc:`/about/contributing/software`.

GitHub repository and the sphinx branch
_______________________________________

In order for GitHub pages to function correctly and automatically publish updated content, the content must be located in a specific repository named after the GitHub organisation, and therefore our website repository is `dcc-ex.github.io <https://github.com/DCC-EX/dcc-ex.github.io>`_.

In addition to this, rather than using the main or master branch, the default branch is called "sphinx", so any branches created for contributing to documentation must use this as the parent, and all pull requests must be submitted against this same branch.

Cloning the repository
______________________

For this section, we are assuming that you are using VSCode with Git installed, allowing the built-in functionality for Git management in VSCode to work.

To clone the documentation repository, and ensure you are on the correct branch, follow these steps:

1. In VSCode, either click on the Source Control icon in the left pane, or press <Ctrl> + <Shift> + "g" + "g" (Yes, press "g" twice).
2. Click the "Clone Repository" button.
3. Enter the documentation repository URL "https://github.com/DCC-EX/dcc-ex.github.io" then press <Enter>.
4. Select the appropriate folder on your hard drive to clone it to, then click "Select Repository Location".
5. The clone will take a minute or two to complete depending on the speed of your computer and internet connection.
6. Once complete, click "Open".
7. At the bottom of the window, ensure that the branch "sphinx" is listed beside the Source Control icon.
8. When you're ready to start editing, click the Source Control or press <Ctrl> + <Shift> +"g" + "g" again.
9. Click the three dots "..." beside "SOURCE CONTROL" in bold text and select "Checkout to".
10. Enter a new name for your branch, then click "Create new branch".

At this point, any editing you do will be on a new branch linked to the parent "sphinx" branch.

While editing, be sure to save often, stage and commit your changes, and publish them. This way, should anything go wrong with your computer, your work will be saved in GitHub rather than be lost.

Live previews
=============

Providing you followed the installation guide for VSCode on the :doc:`/about/contributing/software` page accurately, there are two methods available for generating live previews as you are editing the reStructuredText code.

Esbonio Language server
_______________________

The first option uses the Esbonio Language server installed along with the reStructuredText extension. This option allows you to quickly preview a page you have been editing, as it continuously generates the preview in the background.

To view the preview, press <Ctrl> + <Shift> + "r" and it will open the live preview in a new tab in VSCode. In addition to this method, you can also press <Ctrl> + "k" followed immediately by <Ctrl> + "r" which will generate the live preview in a split pane within VSCode. Every time you save the page you are working on, the live preview will automatically update.

The downside to using this method is that previews are only generated for pages you are actively editing, rather than the entire website. Therefore, prior to submitting any pull requests, it is essential that you follow the build process in the next section to ensure the entire website is still able to be built successfully after any updates.

Sphinx build
____________

To refresh the entire website while editing, it is necessary to run the equivalent commands that the GitHub publishing workflow runs to ensure no issues have been introduced.

To build the website using Sphinx, follow these steps:

1. Open a command prompt.
2. Change to the directory where the "dcc-ex.github.io" repository has been cloned.
3. Run the command "make clean", review the output and ensure no errors are reported.
4. Run the command "make github", and likewise review the output for errors.
5. If any errors have been generated, these must be resolved prior to submitting a pull request.

Once the build of the website completes successfully, preview it locally by opening the main "index.html" file locally in a web browser.

This file can be found in the "docs\\_build\\html" folder within the "dcc-ex.github.io" folder.

Images
======

Image types
___________

We typically prefer compressed PNG files, but can take JPG as well. The resolution should be 72dpi and at least 600 pixels wide (maximum 1200). We can size the images using Sphinx to reduce them as necessary to fit where we need them on the page.

Drawing and saving graphs and schemas
_____________________________________

Use `draw.io <https://app.diagrams.net/>`_ to keep compatibility and allow group collaboration on the same document. Not everyone has access to Microsoft Visio. Export any schema or graph from draw.io in PNG format, with settings if possible as outlined above.

Images, diagrams, and any other artefacts created by draw.io that aren't published on the website should still be committed to the documentation repository in GitHub to ensure other contributors can use these.

An `image-artefacts <https://github.com/DCC-EX/dcc-ex.github.io/tree/sphinx/image-artefacts/>`_ directory has been created in the documentation repository for this purpose. Any draw.io artefacts can be saved here and will not be published as part of the website build.

SVG images
__________

We are currently experimenting with using SVG images to provide contextual links to be embedded within the images so users can be linked directly to relevant documentation. For example, a Fritzing diagram of a CommandStation connected to some peripherals can be given context, and clicking on the relavant component can take you directly to that documentation page.

The simplest options for generating SVG images are `draw.io <https://app.diagrams.net/>`_ or `Inkscape <https://inkscape.org/>`_.

.. tip:: 

  Note that draw.io's native format is XML, with SVG as an export format, whereas Inkscape is a native SVG editor. There are some idosyncrasies as a result, refer to the CSS section below.

Including SVG images within reStructuredText is a little more complex than a simple bitmap image, and will require some CSS to be used in addition to including the file. This section will be updated with further details when available.

To include the SVG file, use the ``raw:: html`` directive:

.. code-block:: 

  .. raw:: html
    :file: ../_static/images/image.svg

CSS for SVG images
^^^^^^^^^^^^^^^^^^^

SVG images can be effectively controlled by CSS, and the implementation of this is controlled via the overall "svg" CSS directive and/or standard CSS classes and IDs.

Given Inkscape is a native SVG editor, you can define the SVG ID relatively simply in the editor itself by using the built-in XML editor.

Draw.io,however, has no way to do this, meaning you need to edit the exported SVG by hand to set the SVG ID.

To cater for this, we've incorporated the generic behaviour of SVG images to be responsive by including the overall "svg" CSS directive in our CSS theme (dccex_theme.css):

.. code-block:: 

  svg {
    max-width: 100%;
    height: auto;
  }

This will ensure your SVG image's size is no larger than the width of the web browser's content window, and will scale up and down with the size of the browser window.

If you have a need to override this behaviour, you can either set the SVG image's ID tag as per the below, or you can implement a reStructuredText container element with an associated class.

.. code-block:: 

  .. container:: svg-override

    .. raw:: html
      :file: ../_static/images/image.svg

You would then need to add an appropriate CSS class to the theme:

.. code-block:: 

  .svg-override {
    width: 50%;
    height: 50%;
  }

If your SVG image contains an ID tag, you can simply use this "id" entry to map to the CSS theme, for example:

.. code-block:: 

  <svg id="svg-css-entry">...</svg>

To then ensure the SVG only occupies 50% of the page, this is added to the CSS theme:

.. code-block:: 

  #svg-css-entry {
    width: 50%;
    height: 50%;
  }

Going any further into the details and options of controlling SVGs via CSS is beyond the scope of this documentation, and beyond the knowledge of the author! The Internet or your local, friendly CSS guru are your best options to understand what is possible.

Hiding pages and comments
==========================

If there is a need to hide a page from the toctree, or a need for a specific comment on a page that isn't part of the published content, use the techniques below.

Hidden Pages
_____________

Use the ``:orphan:`` tag with a comment below it saying "Remove orphan field when the document is added to a toctree". This will allow us to easily search for the word "orphan" to find incomplete pages and avoids triggering an error that there are pages without an entry in a toctree

.. code-block:: 

  :orphan:
  Remove orphan field above when the document is added to a toctree.

This is a handy tip for pages that are a long time in the making and aren't quite ready for publishing, or for pages that provide context in one specific scenario and could be confusing or misleading if included directly in a toctree.

Hidden comments
________________

You can hide notes or searchable placeholders by putting placing the text on a line with a space above and below and preceding it with two period and a space, for example ``.. This is a hidden comment``.

Submission Procedure
=====================

Once you are finished editing and are ready to have your updates published you will need to submit a pull request for one of the team members to approve and review.

.. note:: 

  Remember to perform a `sphinx build`_ prior to submitting any pull requests.

At this piont, go to GitHub and issue a pull request for your branch to be pulled into the sphinx branch. Once it's merged in by one of the admins, your changes will go live!

reStructuredText standards
===========================

Please ensure to follow the standards below when creating or updating documentation to ensure the look and feel of the website remains consistent.

.. highlight:: rst

Headings
_________

* Main Headings have asterisks above and below them:

  .. code-block:: 

    *************
    Main Heading
    *************

* Subheadings are underlined with equals signs:

  .. code-block:: 

    Subheading
    ===========

* The next level is underlined with underscores:

  .. code-block:: 

    Next level
    ___________

* And the next level is underlined with carets:

  .. code-block:: 

    Next level
    ^^^^^^^^^^^

* The last one we use is underlined with tildes:

  .. code-block:: 

    Last level
    ~~~~~~~~~~~

All heading underlines and overlines must be at least as long as the text of the heading, however it's recommended to make them one character longer.

User level logos
_________________

On our :doc:`/levels` page, we refer to Conductor, Tinkerer, and Engineer level users, and where possible, we should be using these logos to help users understand what level the documentation is targeted at.

There are two types of logos available, one suitable for callouts or panels which are simply a square graphic, and one suitable for page headings that contains the graphic and the text.

Graphic logos for callouts/panels:

.. image:: /_static/images/conductor.png
    :alt: Conductor Level
    :scale: 40%
  
.. image:: /_static/images/tinkerer.png
    :alt: Tinkerer Level
    :scale: 40%

.. image:: /_static/images/engineer.png
    :alt: Tinkerer Level
    :scale: 40%

Graphic and text logos for page headings:

.. image:: /_static/images/conductor-level.png
    :alt: Conductor Level
    :scale: 40%
  
.. image:: /_static/images/tinkerer-level.png
    :alt: Tinkerer Level
    :scale: 40%

.. image:: /_static/images/engineer-level.png
    :alt: Tinkerer Level
    :scale: 40%

Here's an example for a Conductor level page heading graphic:

.. code-block:: 

  .. image:: /_static/images/conductor-level.png
    :alt: Conductor Level 
    :scale: 40%

Refer to `images`_ below for details on how to include images, and set the scale as appropriate. A good example of the use of the different types of logos is the Turntable-EX :doc:`/ex-turntable/ex-turntable/ex-turntable` page.

Links
______

Internal
^^^^^^^^^

Sphinx cross-references are used for internal links. This ensures they are
correct and by default will use the destination heading text as the link text.

To link to a page use ``:doc:``:

.. admonition:: Example

  ::

    :doc:`/reference/hardware/motor-boards`

  :doc:`/reference/hardware/motor-boards`

The document name is a relative or absolute (within the documentation) file
path, without the .rst suffix.

To link to a position within a page use ``:ref:``. A reST label can be used as
the reference, but on the DCC++EX website headings are made available to use as
references:

.. admonition:: Example

  ::

    :ref:`advanced-setup/motor-board-config:Configure Using the Installer`

  :ref:`ex-commandstation/advanced-setup/motor-board-config:Configure Using the Installer`

The reference is the full name of the document (the absolute path without
a leading /), a colon, and the section heading. The full name must be used
even when referring to headings in the same source file.

Alternative text can be used for the link:

.. admonition:: Example

  ::

    :ref:`WiFi configuration <advanced-setup/supported-microcontrollers/wifi-mega:Short Version of Network Setup>`

  :ref:`WiFi configuration <ex-commandstation/advanced-setup/supported-microcontrollers/wifi-mega:Short Version of Network Setup>`

External
^^^^^^^^

For URLs that are shown, just use the URL:

.. admonition:: Example

    ::

        https://dcc-ex.com/index.html

    https://dcc-ex.com/index.html

To show link text instead of the URL:

.. admonition:: Example

    ::

        `TrainBoard Thread <https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/>`_

    `TrainBoard Thread <https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/>`_

For better accessibility, and generally clearer content, use `strong link text <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#accessibility>`_.

If the link will be used multiple times, or to keep the URL separate in the
source file, define a target:

.. admonition:: Example

    ::

        Link to the `DCC++EX home page`_.

        .. _DCC++EX home page: https://dcc-ex.com/index.html

    Link to the `DCC++EX home page <https://dcc-ex.com/index.html>`_.

Downloads
^^^^^^^^^

Download buttons are created using the ``dcclink`` class, added using the
``.. rst-class::`` directive:

.. admonition:: Example

    ::

        .. rst-class:: dcclink

           `Official Release page <https://github.com/DCC-EX/CommandStation-EX/releases>`_

    .. rst-class:: dcclink

       `Official Release page <https://github.com/DCC-EX/CommandStation-EX/releases>`_

Including images
________________

Include images with the ``.. image::`` and ``.. figure::`` directives. Horizontal positioning using the ``:align:`` option needs a bit of care.

Where possible e.g. if just presenting a single image, either don't use it, or choose ``:align: center``.

``:align: left`` (or right) allows multiple images to be shown on the same line (if the browser window is wide enough), or text to flow around the image. You may have to cancel this behaviour for the next content yourself.

A single ``|`` adds an additional blank line before the next paragraph in the output; before a heading, or if a blank line is not wanted use ``.. rst-class:: clearer``.

Use a figure when including a caption. Sphinx will automatically number the figure. Add a ``:name:`` option to be able to refer to the figure in the text using ``:numref:`<figure name>```.

Tables
______

There are two recommended table types to use within our website.

The recommended option for tables that have CSS controlled formatting and are relatively easy to update, use the ``list-table`` reStructuredText directive.

.. code-block:: 

  .. list-table::
    :widths: auto
    :header-rows: 1
    :class: command-table

    * - Heading 1
      - Heading 2
      - Heading 3
    * - Row 1 column 1
      - Row 1 column 2
      - Row 1 column 3
    * - Row 2 column 1
      - Row 2 column 2
      - Row 2 column 3
    * - Row 3 column 1
      - Row 3 column 2
      - Row 3 column 3

This will render a table like this:

.. list-table::
    :widths: auto
    :header-rows: 1
    :class: command-table

    * - Heading 1
      - Heading 2
      - Heading 3
    * - Row 1 column 1
      - Row 1 column 2
      - Row 1 column 3
    * - Row 2 column 1
      - Row 2 column 2
      - Row 2 column 3
    * - Row 3 column 1
      - Row 3 column 2
      - Row 3 column 3

Alternatively, for simple tables that don't require specific formatting and aren't updated often, you can use the simple markdown style.

.. code-block:: 

  +----------------+----------------+----------------+
  | Heading 1      | Heading 2      | Heading 3      |
  +================+================+================+
  | Row 1 column 1 | Row 1 column 2 | Row 1 column 3 |
  +----------------+----------------+----------------+
  | Row 2 column 1 | Row 2 column 2 | Row 2 column 3 |
  +----------------+----------------+----------------+
  | Row 3 column 1 | Row 3 column 2 | Row 3 column 3 |
  +----------------+----------------+----------------+

This will render a table like this:

+----------------+----------------+----------------+
| Heading 1      | Heading 2      | Heading 3      |
+================+================+================+
| Row 1 column 1 | Row 1 column 2 | Row 1 column 3 |
+----------------+----------------+----------------+
| Row 2 column 1 | Row 2 column 2 | Row 2 column 3 |
+----------------+----------------+----------------+
| Row 3 column 1 | Row 3 column 2 | Row 3 column 3 |
+----------------+----------------+----------------+

Note that while these tables look very similar, adding and editing the markdown style table becomes quite cumbersome compared with ``list-table``.


Style Guidelines
________________

* every page MUST start with one or more level images (after the title) to indicate the intended base audience for the page (except a few pages like home, about, contact, etc)
* Where possible, use the expansions for the level images:

  * \|conductor\| |conductor|
  * \|tinkerer\| |tinkerer|
  * \|engineer\| |engineer|
  * \|conductor-no-text\| |conductor-no-text|
  * \|tinkerer-no-text\| |tinkerer-no-text|
  * \|engineer-no-text\| |engineer-no-text|

* Where possible, use the Team and Product names the expansions (not possible in headings)
  
  * \|DCC-EX\| for |DCC-EX|
  * \|EX-CS\| for |EX-CS|
  * \|EX-I\| for |EX-I|
  * \|EX-R\| for |EX-R|
  * \|EX-TT\| for |EX-TT|
  * \|EX-DCCI\| for |EX-DCCI|
  * \|BSC\| for |BSC|

* Where possible, use the expansions for the level text 

  * \|conductor-text\| |conductor-text|
  * \|tinkerer-text\| |tinkerer-text|
  * \|engineer-text\| |engineer-text|

* Use British/Australian/Canadian spelling e.g. 'colour' not 'color'.  |br|\ (Primarily because it is used in more English speaking countries)
*	Use railroad/railway terminology that is understandable by all English-speaking people. |br|\ Where there are clear differences from US to non-US terminology use both with a slash between and use the US version first. e.g. turnouts/points, consists/multiple units, switching/shunting.
* In general use **'loco'** instead of 'locomotive' or 'engine'
*	No full stop at the end of a numbered or unnumbered list
*	Numbered lists should generally only be used if they are describing a specific sequence, or the numbering is important to the text
* Use first person (you and your; not I, me, my or am) language
*	A string of nouns should be generally be sequenced in alphabetic order, unless it makes more sense within the context to display them in some other sequence
* Double quotes (") should only be used for quoting text from people, documents or web sites
*	No quotes around 'Also See' type references
*	Avoid '(above)' or '(below)' in text.  Use hypertext links instead
*	'TODO' or in the text means that it is still a work-in-process and needs to be updated.  It may be followed by descriptive text in italics describing the issue to be fixed
* Use \`\`\literal text blocks\`\` when describing preference values  - ``literal text blocks``
* Use \:menuselection\:\`Menu --> Preferences --> ..\` for menu descriptions - :menuselection:`Menu --> Preferences --> ..` 
* Use \:guilabel\:\`\GUI labels\` for buttons  - :guilabel:`GUI labels`
* Avoid using 'phone' alone. Preferably use 'Android device/phone'
* For dates, use dd-mmm-yyyy or yyyy-mm-dd to avoid confusion with the way dates are uniquely written in the US. |br|\ e.g. 2-Mar-2022 or 2022-3-2, not 2-3-2022 
* Heading levels:

  * ######### with overline, for parts - not really used
  * \*\*\*\*\*\*\*\*\*\*\*\* Page Titles
  * \=\=\=\=\=\=\=\=\=\ for sections
  * \_\_\_\_\_\_\_\_\_\_\_\_ for subsections
  * \^\^\^\^\^\^\^\^\^\^ for subsubsections
  * \~\~\~\~\~\~\~\~\~\~ for paragraphs
  * only if really needed: 
  
     * \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\' for sub paragraphs
